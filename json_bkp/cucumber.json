[
  {
    "line": 2,
    "elements": [
      {
        "line": 4,
        "name": "im a background",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": []
      },
      {
        "start_timestamp": "2020-09-13T08:25:05.737Z",
        "before": [
          {
            "result": {
              "duration": 3996600,
              "status": "passed"
            },
            "match": {
              "location": "stepDefs.MyStepdefs.bf(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 7,
        "name": "Test New",
        "description": "",
        "id": "test-feature-bbbbbbbbbbbbbbbb;test-new",
        "after": [
          {
            "result": {
              "duration": 3996900,
              "status": "passed"
            },
            "match": {
              "location": "stepDefs.MyStepdefs.af(io.cucumber.java.Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "passed"
            },
            "before": [
              {
                "result": {
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.bfs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "line": 8,
            "name": "hello world",
            "match": {
              "location": "stepDefs.MyStepdefs.helloWorld()"
            },
            "after": [
              {
                "result": {
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.afs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "keyword": "Given "
          },
          {
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png",
                "name": "BYTES"
              },
              {
                "data": "",
                "mime_type": "image/png",
                "name": "BASE64"
              }
            ],
            "result": {
              "duration": 12031877600,
              "status": "passed"
            },
            "before": [
              {
                "result": {
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.bfs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "line": 9,
            "name": "Try me",
            "match": {
              "location": "stepDefs.MyStepdefs.tryMe()"
            },
            "after": [
              {
                "result": {
                  "duration": 998700,
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.afs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@E2E1"
          },
          {
            "name": "@E2E"
          }
        ]
      },
      {
        "line": 4,
        "name": "im a background",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": []
      },
      {
        "start_timestamp": "2020-09-13T08:25:17.868Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "stepDefs.MyStepdefs.bf(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 24,
        "name": "Some Scen",
        "description": "",
        "id": ";some-scen;;2",
        "after": [
          {
            "result": {
              "duration": 998800,
              "status": "passed"
            },
            "match": {
              "location": "stepDefs.MyStepdefs.af(io.cucumber.java.Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "output": [
              "hello"
            ],
            "result": {
              "duration": 1999200,
              "status": "passed"
            },
            "before": [
              {
                "result": {
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.bfs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "line": 17,
            "name": "Try me \"manju\"",
            "match": {
              "arguments": [
                {
                  "val": "\"manju\"",
                  "offset": 7
                }
              ],
              "location": "stepDefs.MyStepdefs.tryMe(java.lang.String)"
            },
            "after": [
              {
                "result": {
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.afs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "error_message": "io.cucumber.core.exception.CucumberException: Step [datatable] is defined with 0 parameters at \u0027stepDefs.MyStepdefs.datatable()\u0027.\nHowever, the gherkin step has 1 arguments:\n * Table:\n      | some info  | someones watcing  |\n      | some info2 | someones watcing2 |\n\nStep text: datatable\r\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.arityMismatch(PickleStepDefinitionMatch.java:83)\r\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:42)\r\n\tat io.cucumber.core.runner.TestStep.executeStep(TestStep.java:92)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:63)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:49)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:99)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:71)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:116)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:113)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:764)\r\n\tat org.testng.TestRunner.run(TestRunner.java:585)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:384)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:286)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1140)\r\n\tat org.testng.TestNG.runSuites(TestNG.java:1069)\r\n\tat org.testng.TestNG.run(TestNG.java:1037)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "duration": 6996800,
              "status": "failed"
            },
            "before": [
              {
                "result": {
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.bfs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "line": 18,
            "name": "datatable",
            "match": {
              "location": "stepDefs.MyStepdefs.datatable()"
            },
            "after": [
              {
                "result": {
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.afs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "rows": [
              {
                "cells": [
                  "some info",
                  "someones watcing"
                ]
              },
              {
                "cells": [
                  "some info2",
                  "someones watcing2"
                ]
              }
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "name": "@E2E1"
          },
          {
            "name": "@ignore"
          }
        ]
      },
      {
        "line": 4,
        "name": "im a background",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": []
      },
      {
        "start_timestamp": "2020-09-13T08:25:17.917Z",
        "before": [
          {
            "result": {
              "duration": 1000500,
              "status": "passed"
            },
            "match": {
              "location": "stepDefs.MyStepdefs.bf(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 25,
        "name": "Some Scen",
        "description": "",
        "id": ";some-scen;;3",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "stepDefs.MyStepdefs.af(io.cucumber.java.Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "output": [
              "hello"
            ],
            "result": {
              "status": "passed"
            },
            "before": [
              {
                "result": {
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.bfs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "line": 17,
            "name": "Try me \"manju2\"",
            "match": {
              "arguments": [
                {
                  "val": "\"manju2\"",
                  "offset": 7
                }
              ],
              "location": "stepDefs.MyStepdefs.tryMe(java.lang.String)"
            },
            "after": [
              {
                "result": {
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.afs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "error_message": "io.cucumber.core.exception.CucumberException: Step [datatable] is defined with 0 parameters at \u0027stepDefs.MyStepdefs.datatable()\u0027.\nHowever, the gherkin step has 1 arguments:\n * Table:\n      | some info  | someones watcing  |\n      | some info2 | someones watcing2 |\n\nStep text: datatable\r\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.arityMismatch(PickleStepDefinitionMatch.java:83)\r\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:42)\r\n\tat io.cucumber.core.runner.TestStep.executeStep(TestStep.java:92)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:63)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:49)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:99)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:71)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:116)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:113)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:764)\r\n\tat org.testng.TestRunner.run(TestRunner.java:585)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:384)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:286)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1140)\r\n\tat org.testng.TestNG.runSuites(TestNG.java:1069)\r\n\tat org.testng.TestNG.run(TestNG.java:1037)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "duration": 1000700,
              "status": "failed"
            },
            "before": [
              {
                "result": {
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.bfs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "line": 18,
            "name": "datatable",
            "match": {
              "location": "stepDefs.MyStepdefs.datatable()"
            },
            "after": [
              {
                "result": {
                  "duration": 999600,
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.afs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "rows": [
              {
                "cells": [
                  "some info",
                  "someones watcing"
                ]
              },
              {
                "cells": [
                  "some info2",
                  "someones watcing2"
                ]
              }
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "name": "@E2E1"
          },
          {
            "name": "@ignore"
          }
        ]
      },
      {
        "line": 4,
        "name": "im a background",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": []
      },
      {
        "start_timestamp": "2020-09-13T08:25:17.940Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "stepDefs.MyStepdefs.bf(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 26,
        "name": "Some Scen",
        "description": "",
        "id": ";some-scen;;4",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "stepDefs.MyStepdefs.af(io.cucumber.java.Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "output": [
              "hello"
            ],
            "result": {
              "duration": 998400,
              "status": "passed"
            },
            "before": [
              {
                "result": {
                  "duration": 1002500,
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.bfs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "line": 17,
            "name": "Try me \"manju3\"",
            "match": {
              "arguments": [
                {
                  "val": "\"manju3\"",
                  "offset": 7
                }
              ],
              "location": "stepDefs.MyStepdefs.tryMe(java.lang.String)"
            },
            "after": [
              {
                "result": {
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.afs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "error_message": "io.cucumber.core.exception.CucumberException: Step [datatable] is defined with 0 parameters at \u0027stepDefs.MyStepdefs.datatable()\u0027.\nHowever, the gherkin step has 1 arguments:\n * Table:\n      | some info  | someones watcing  |\n      | some info2 | someones watcing2 |\n\nStep text: datatable\r\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.arityMismatch(PickleStepDefinitionMatch.java:83)\r\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:42)\r\n\tat io.cucumber.core.runner.TestStep.executeStep(TestStep.java:92)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:63)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:49)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:99)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:71)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:116)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:113)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:764)\r\n\tat org.testng.TestRunner.run(TestRunner.java:585)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:384)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:286)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1140)\r\n\tat org.testng.TestNG.runSuites(TestNG.java:1069)\r\n\tat org.testng.TestNG.run(TestNG.java:1037)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "duration": 998800,
              "status": "failed"
            },
            "before": [
              {
                "result": {
                  "duration": 999000,
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.bfs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "line": 18,
            "name": "datatable",
            "match": {
              "location": "stepDefs.MyStepdefs.datatable()"
            },
            "after": [
              {
                "result": {
                  "duration": 999300,
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.afs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "rows": [
              {
                "cells": [
                  "some info",
                  "someones watcing"
                ]
              },
              {
                "cells": [
                  "some info2",
                  "someones watcing2"
                ]
              }
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "name": "@E2E1"
          },
          {
            "name": "@ignore"
          }
        ]
      },
      {
        "line": 4,
        "name": "im a background",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": []
      },
      {
        "start_timestamp": "2020-09-13T08:25:17.971Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "stepDefs.MyStepdefs.bf(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 35,
        "name": "Some Scen with template keyword",
        "description": "",
        "id": ";some-scen-with-template-keyword;;2",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "stepDefs.MyStepdefs.af(io.cucumber.java.Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Template",
        "steps": [
          {
            "output": [
              "hello"
            ],
            "result": {
              "duration": 999500,
              "status": "passed"
            },
            "before": [
              {
                "result": {
                  "duration": 999700,
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.bfs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "line": 30,
            "name": "Try me \"man\"",
            "match": {
              "arguments": [
                {
                  "val": "\"man\"",
                  "offset": 7
                }
              ],
              "location": "stepDefs.MyStepdefs.tryMe(java.lang.String)"
            },
            "after": [
              {
                "result": {
                  "status": "passed"
                },
                "match": {
                  "location": "stepDefs.MyStepdefs.afs(io.cucumber.java.Scenario)"
                }
              }
            ],
            "keyword": "Given "
          }
        ],
        "tags": [
          {
            "name": "@E2E1"
          },
          {
            "name": "@ignore"
          },
          {
            "name": "@exampletag"
          }
        ]
      }
    ],
    "name": "Test Feature bbbbbbbbbbbbbbbb",
    "description": "",
    "id": "test-feature-bbbbbbbbbbbbbbbb",
    "keyword": "Feature",
    "uri": "file:src/test/features/test1.feature",
    "tags": [
      {
        "name": "@E2E1",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  }
]